{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setReserved","NONE","sortType","setSortType","visibleGoods","goods","oldSortType","oldIsReversed","sort","a","b","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","map","item","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAQE,IAAME,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KA4CMC,EA1CoB,SACxBC,EACAC,EACAC,GAEA,IAAMH,EAAY,YAAOC,GAiBzB,OAfAD,EAAaI,MAAK,SAACC,EAAGC,GACpB,OAAQJ,GACN,KAAKX,EAASgB,SACZ,OAAOF,EAAEG,cAAcF,GACzB,KAAKf,EAASkB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OACtB,QACE,OAAOnB,EAASM,SAIlBM,GACFH,EAAaW,UAGRX,EAoBYY,CACnBpB,EAAiBM,EAAUH,GAG7B,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWf,IAAaP,EAASgB,SAC7B,iBACA,0BACJQ,QA7Ba,WACnBhB,EAAYR,EAASgB,WAuBjB,iCAUA,wBACEO,KAAK,SACLD,UAAWf,IAAaP,EAASkB,OAC7B,oBACA,6BACJM,QAnCW,WACjBhB,EAAYR,EAASkB,SA6BjB,4BAUA,wBACEK,KAAK,SACLD,WAA0B,IAAflB,EACP,oBACA,6BACJoB,QAzCQ,WACdnB,GAAY,SAAAO,GAAa,OAAKA,MAmC1B,sBAUER,GAAcG,IAAaP,EAASM,OACpC,wBACEiB,KAAK,SACLD,UAAU,4BACVE,QA9CI,WACZhB,EAAYR,EAASM,MACrBD,GAAY,IAyCN,sBAWJ,6BACE,6BACGI,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cCxHpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e3fcaf90.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype IsReserved = boolean;\n\nexport const App: React.FC = () => {\n  const [isReversed, setReserved] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE as SortType);\n\n  const getReorderedGoods = (\n    goods: string[],\n    oldSortType: SortType,\n    oldIsReversed: IsReserved,\n  ) => {\n    const visibleGoods = [...goods];\n\n    visibleGoods.sort((a, b) => {\n      switch (oldSortType) {\n        case SortType.ALPHABET:\n          return a.localeCompare(b);\n        case SortType.LENGTH:\n          return a.length - b.length;\n        default:\n          return SortType.NONE;\n      }\n    });\n\n    if (oldIsReversed) {\n      visibleGoods.reverse();\n    }\n\n    return visibleGoods;\n  };\n\n  const sortAlphabet = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const sortLength = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const reverse = () => {\n    setReserved(oldIsReversed => !oldIsReversed);\n  };\n\n  const reset = () => {\n    setSortType(SortType.NONE);\n    setReserved(false);\n  };\n\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer, sortType, isReversed,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortType === SortType.ALPHABET\n            ? 'button is-info'\n            : 'button is-info is-light'}\n          onClick={sortAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortType === SortType.LENGTH\n            ? 'button is-success'\n            : 'button is-success is-light'}\n          onClick={sortLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={isReversed === true\n            ? 'button is-warning'\n            : 'button is-warning is-light'}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortType !== SortType.NONE) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(item => (\n            <li data-cy=\"Good\" key={item}>{item}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}